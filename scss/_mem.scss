// Crossass Mem
//
// Copyright (c) 2014 Whizark
// @category mem

// The html font-size for the base rem value
@include x-config('x.mem.rem-base', 16px, $default: true);

// The current context for the base mem value
// @private
@include x-config('x.mem.-current-context', '', $default: true);

// The storage for the context-based mem value
// @private
@include x-config('x.mem.-context', ('-base': x-config('x.mem.rem-base')), $default: true);

// Sets a base mem value for a context
// @mixin x-mem-base
// @param $value   {Number}      The base mem value
// @param $context {String|Null} The context to set the base mem value
@mixin x-mem-base($value, $context: null) {
    %x-mem--#{unique-id()} {
        $value: x-mem-base($context, $value);
    }
}

// Sets or gets a base mem value for a context
// @function x-mem-base
// @param    $context {String}      The context to set/get the base mem value
// @param    $value   {Number|Null} The base mem value
// @return            {Number}      The base mem value for the context
@function x-mem-base($context: null, $value: null) {
    @if $value == null {
        $value: x-mem--get-contextual-mem-base($context);

        @if $value == null {
            @return 1rem;
        }

        @return $value;
    }

    $current-context: x-mem--set-current-context($context);

    @return x-mem--set-contextual-mem-base($value, $context);
}

// Gets the px representation of the base mem for a context
// @function x-mem-base-fallback
// @param    $context {String} The context to get the px value
// @return            {Number} The px value of the base mem for the context
@function x-mem-base-fallback($context: null) {
    $value: x-mem--get-contextual-mem-base($context);

    @if $value == null {
        @return 1rem;
    }

    @return x-mem--rem-to-px($value);
}

// Converts mem value(s) to rem based on a mem context
// @function x-mem
// @param    $values  {Number|String|List} The mem value(s) to convert to rem
// @param    $context {String}             The context for the mem
// @return            {Number|String|List} The converted rem value(s)
@function x-mem($values, $context: null) {
    $mem-base: x-mem--get-contextual-mem-base($context);

    @return x-mem--unit-calc('x-mem--to-rem', $values, $mem-base);
}

// Converts mem value(s) to px based on a mem context
// @function x-mem-fallback
// @param    $values  {Number|String|List} The mem value(s) to convert to px
// @param    $context {String}             The context for the mem
// @return            {Number|String|List} The converted px value(s)
@function x-mem-fallback($values, $context: null) {
    $mem-base: x-mem--get-contextual-mem-base($context);

    @return x-mem--unit-calc('x-mem--to-px', $values, $mem-base);
}

// Calculates unit representation of another unit value(s)
// @function x-mem--unit-calc
// @private
// @param    $calculator {String}             The function name to calculate the single value
// @param    $values     {Number|String|List} The unit value(s) to calculate the output unit value
// @param    $unit-base  {Number}             The base unit value for the output unit value
// @return               {Number|String|List} The calculated unit value(s)
@function x-mem--unit-calc($calculator, $values, $unit-base) {
    @if type-of($values) == 'number' or type-of($values) == 'string' {
        @return call($calculator, $values, $unit-base);
    }

    $length: length($values);

    @if $length == 1 {
        @return call($calculator, nth($values, 1), $unit-base);
    }

    $unit-values: ();

    @for $i from 1 through $length {
        $unit-values: append($unit-values, call($calculator, nth($values, $i), $unit-base));
    }

    @return $unit-values;
}

// Calculates unit representation of another unit value based on a base unit value
// @function x-mem--unit-to-unit
// @private
// @param    $value             {Number|String} The input unit value to calculate the output unit value
// @param    $unit-base         {Number}        The base unit value for the output unit value
// @param    $default-unit-base {Number}        The default base unit value for the output unit value
// @param    $unit              {Number}        The 1 unit value of the output unit value
// @param    $reverse           {Bool}          Whether calculate back the unit value from the input unit value
// @return                      {Number|String} The calculated unit value
@function x-mem--unit-to-unit($value, $unit-base, $default-unit-base, $unit, $reverse: false) {
    @if $value == 'auto' {
        @return $value;
    }

    @if $unit-base == null {
        $unit-base: $default-unit-base;
    }

    @if $reverse {
        $value: x-mem--strip-unit($value) / x-mem--strip-unit($unit-base);
    } @else {
        $value: x-mem--strip-unit($value) * x-mem--strip-unit($unit-base);
    }

    @if ($value == 0) {
        @return 0;
    }

    @return $value * $unit;
}

// Calculates rem representation of a mem value based on a base mem value
// @function x-mem--to-rem
// @private
// @param    $value    {Number|String} The mem value to calculate rem
// @param    $mem-base {Number}        The base mem value for the mem value
// @return             {Number|String} The calculated rem value
@function x-mem--to-rem($value, $mem-base: null) {
    @return x-mem--unit-to-unit($value, $mem-base, x-mem--get-contextual-mem-base(null), 1rem);
}

// Calculates px representation of a mem value based on a base mem value
// @function x-mem--to-px
// @private
// @param    $value    {Number|String} The mem value to calculate px
// @param    $mem-base {Number}        The base mem value for the mem value
// @return             {Number|String} The calculated px value
@function x-mem--to-px($value, $mem-base: null) {
    $value: x-mem--unit-to-unit($value, $mem-base, x-mem--get-contextual-mem-base(null), 1rem);
    $value: x-mem--rem-to-px($value);

    @return $value;
}

// Calculates px representation of a rem value based on a base rem value
// @function x-mem--rem-to-px
// @private
// @param    $value    {Number|String} The rem value to calculate px
// @param    $rem-base {Number}        The base rem value for the rem value
// @return             {Number|String} The calculated px value
@function x-mem--rem-to-px($value, $rem-base: null) {
    @return x-mem--unit-to-unit($value, $rem-base, x-config('x.mem.rem-base'), 1px);
}

// Strips the unit of a number value
// @function x-mem--strip-unit
// @private
// @param    $number {Number} The number value to strip the unit
// @return           {Number} The unitless number value
@function x-mem--strip-unit($number) {
    @return $number / ($number * 0 + 1);
}

// Sets the current context for the base mem value
// @function x-mem--set-current-context
// @private
// @param    $context {String} The context to set
// @return            {String} The context
@function x-mem--set-current-context($context: null) {
    @if $context == null {
        $context: '-base';
    }

    $context: x-config('x.mem.-current-context', $context);

    @return $context;
}

// Gets the base mem value based on a context
// @function x-mem--get-contextual-mem-base
// @private
// @param    $context {String} The context to get the base mem value
// @return            {Number} The base mem value
@function x-mem--get-contextual-mem-base($context: null) {
    @if $context == null {
        $context: x-config('x.mem.-current-context');
    }

    @if $context == '' {
        @warn 'No context exists.';

        @return null;
    }

    $path: 'x.mem.-context.' + $context;

    @if not x-config-has($path) {
        @warn 'The context "#{$context}" doesn\'t exist.';

        @return null;
    }

    @return x-config($path);
}

// Sets a base mem value for a context
// @function x-mem--set-contextual-mem-base
// @private
// @param    $value   {Number} The base mem value to set for the context
// @param    $context {String} The context to set the base mem value
// @return            {Number} The base mem value
@function x-mem--set-contextual-mem-base($value, $context: null) {
    @if $context == null {
        $context: x-config('x.mem.-current-context');
    }

    @if $context == '' {
        $context: '-base';
    }

    $value: x-config('x.mem.-context.' + $context, x-mem--strip-unit($value) * 1rem);

    @return $value;
}
